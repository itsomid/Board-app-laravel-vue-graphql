"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    board(id: ID! @eq): Board @find
}

type Mutation {
    cardAdd(input: CreatCardInput! @spread): Card! @create
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    boards: [Board!]! @hasMany
    cards: [Card!]! @hasMany

    "When the account was last updated."
    updated_at: DateTime!

}

type Board {
    id: ID!
    title: String!
    color: String!
    lists: [CardList!]! @hasMany
    owner: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!

}

type Card {
    id: ID!
    title: String!
    order: Int!
    list: CardList! @belongsTo
    owner: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!

}

type CardList {
    id: ID!
    title: String!
    board: Board! @belongsTo
    cards: [Card!]! @hasMany
    board_id: ID!
    created_at: DateTime!
    updated_at: DateTime!
}

input CreatCardInput {
    title: String!
    order: Int!
    list_id: ID!
    owner_id: ID!
}

